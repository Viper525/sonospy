[WMP Translators]
# Translations to be applied for UPnP servers specified after the equals in -w command
# line option
#
# WMP is the reference (do not change)
# Supported types are:
#    Through - Sonos WMP searches are passed through unadjusted to the proxied server
#              (will only work with fully WMP compliant servers - these will show up
#              on the Sonos controller anyway so it is only useful for testing)
#    Translate - WMP containers are translated to those specified for the UPnP server
#                (only 3 containers are actually used by Sonos for WMP)
#    Cache - WMP containers are translated, plus UPnP server returns are cached for
#            further WMP searches to translate into UPnP server searches.
#            Second parameter shows whether container is discrete or needs
#            search criteria applying subsequently
#    Browse - Sonos WMP searches are translated into UPnP server browses - NOTE, NOT CURRENTLY SUPPORTED
#
WMP=1
#Twonky=Translate
Twonky=Cache,Not Discrete
Asset=Cache,Discrete
xxxx=Browse
Windows=Through

[WMP Containers]
# WMP container IDs (not all are supported by Sonos)
# Do not change
#
Root=0
Music=1
All Music=4
Genre=5
Artist=6
Album=7
Playlists=F
Folders=14
Contributing Artists=100
Album Artist=107
Composer=108
Rating=101

[Sonos Containers]
# WMP containers that Sonos searches
# Format is containername=container,upnp:class[,operator] (note Sonos does not
# always query a specific container, hence the need for the class)
# Note - operator defaults to = (no need to specify that)
# Note - names must remain the same!
#
Artist=107,object.container.person.musicArtist
Contributing Artists=100,object.container.person.musicArtist
Album=0,object.container.album.musicAlbum
Composer=108,object.container.person.musicArtist
Genre=0,object.container.genre.musicGenre
Tracks=0,object.item.audioItem,derivedfrom
Playlists=0,object.container.playlistContainer

[Asset Containers]
# Containers that Asset uses for WMP container names
# Note that mapping the wrong containers may allow alternate containers to be
# searched, but equally they may not work correctly
# Note - for Asset to work with Sonos like this, Asset needs some removals from
#        its browse tree.
#
#        Browse tree that works:
#           Artist (No track listing)
#               Album (Display all)
#           Contributing Artist (No track listing)
#               Album (Display all)
#           Album (Display all)
#           Composer (No track listing)
#               Album (Display all)
#           Genre (No track listing)
#               Artist (No track listing)
#                   Album (Display all)
#           Title (Display all)
#           Playlist not set (needs registered version)
#
# It is likely that your Asset installation will use some container IDs that
# are different to the ones below (esp Contributing Artists as that is not in
# the standard Asset browse tree and you will have to add it)
#
# It is also likely that you will have to rescan your library in Asset to
# activate the above changes
#
# Note - keys (names) below must remain the same!
#
Artist=au1
Contributing Artists=au15
Album=au2
Composer=au6
Genre=au4
Tracks=au3
Playlists=

[Asset Attribute Mapping]
# This is not needed for Cache type translations
#
#microsoft__colon__artistAlbumArtist=upnp__colon__artist

[Twonky Containers]
# Containers that Twonky supports
#
Artist=1$12
Contributing Artists=1$17,object.container.person.albumArtist
Album=1$14
Composer=1$16,object.container.person.author
Genre=1$13
Tracks=1$268435466
Playlists=1$11

[Twonky Container Mapping]
# Mapping of Twonky containers to WMP containers (where WMP specifies containers)
# Where container is not supported, equate to empty string so controller shows
# no selection available
#
#Album Artist=Artist
107=1$12
#Contributing Artists=Album Artist
100=1$17
#Composer=Composer
108=1$16

[Twonky Attribute Mapping]
# Mapping of Twonky attributes to WMP attributes where WMP attributes are not
# supported by Twonky
#
microsoft__colon__artistAlbumArtist=upnp__colon__artist
object.container.person.musicArtist=object.container.person.author
microsoft__colon__authorComposer=upnp__colon__author
microsoft__colon__artistAlbumArtist=upnp__colon__albumArtist
microsoft__colon__artistPerformer=upnp__colon__albumArtist

#====================================================================

#[IP Volume]
#Front Room,Volume Up=IRAnywhere/AV VOL UP.txt
#Front Room,Volume Down=IRAnywhere/AV VOL DOWN.txt
#Front Room,Volume Mute=IRAnywhere/AV MUTE.txt
#Front Room,Volume UnMute=IRAnywhere/AV UNMUTE.txt
#IR_IP=192.168.0.31
#IR_PORT=65432

#====================================================================

[INI]
controlpoint_port=50101
proxy_port=50102
comms_port=50103
wmp_proxy_port=10243
wmp_internal_port=10244
internal_proxy_udn=uuid:5e0fc086-1c37-4648-805c-ec2aba2b0a27

# If you have both art embedded in music files and art in folders, you
# can choose which one takes precedence with prefer_folderart

prefer_folderart=Y

# You can choose whether the artist index contains entries from the
# artist or albumartist tags in your data (note that the contributing
# artist index will contain entries from your artist tags). If you want
# to show albumartist tags, set use_albumartist to Y

use_albumartist=Y

# You can choose whether to show entries for duplicate albums and 
# tracks in the indexes

show_duplicates=N

# You can choose how to group tracks into albums. If you want all 
# tracks from an album to be together regardless of artist, set
# album_identification to album. If you want separate albums for 
# separate artists, set it to album,artist.

album_identification=album
#album_identification=album,artist

# If you have multiple tag entries per track, you can use the following
# keys to set which of those entries are displayed in the now playing
# screen. Those same tags will be the ones scrobbled if scrobbling is 
# enabled.
#
# Allowable values are:
#
#     first    - the first tag entry is displayed
#     last     - the last entry is displayed
#     all      - all tag entries are displayed, separated by the 
#                combiner characters
#     selected - the selected (in the index) entry is displayed
#                (default)
#
# Fields where multiple tags can cause alternate display values are:
#
#     album / artist

now_playing_album=first
now_playing_album_combiner=' / '

now_playing_artist=last
now_playing_artist_combiner=' / '

# If playing a track from a virtual album or work, you can set whether
# to display the virtual/work name and/or artist name instead of the
# track album/artist names (note whatever is displayed is scrobbled).
# To do so set one or more of the following keys to Y:

virtual_now_playing_album = N
virtual_now_playing_artist = N

work_now_playing_album = N
work_now_playing_artist = N

#====================================================================

[index entry extras]

# This section allows setting of characters to be displayed around
# extra fields added to index entries. The extra fields themselves
# are defined in the simple sort orders section. You can add extra
# fields before (prefix) and/or after (suffix) an entry. Extra fields
# are displayed as:
#
#     PREFIX entry SUFFIX
#
# You can specify a prefix before an index entry, for example 
# playcount. You can specify the characters that you want to display
# around the prefix. If you want to include spaces in the characters,
# enclose the characters in single quotes. The 
# entry_prefix_start_separator characters will be displayed before 
# the prefix, and the entry_prefix_end_separator will be displayed
# after the prefix (and so between the prefix and the entry). If
# you do not want a separator, leave it empty. The prefix will be
# displayed as:
#
#     START_SEPARATOR prefix END_SEPARATOR

entry_prefix_start_separator=
entry_prefix_end_separator=' • '

# You can specify a suffix after an entry. The same rules apply as
# for a prefix, but note that in this case the start character will
# be between the suffix and the entry and the end character will be
# at the end of the line.

entry_suffix_start_separator=' • '
entry_suffix_end_separator=

# When a prefix or a suffix is displayed with an entry, it is 
# possible that the prefix/suffix will be blank due to empty tag
# data. If you want a specific character or characters to be
# displayed instead of nothing, specify them in the entry_extras_empty
# key:

entry_extras_empty=?

# When you specify a date to be displayed as a prefix or a suffix,
# you may want to control the format used to display the date. Do that with
# the entry_extras_date_format key.
# 
# entry_extras_date_format accepts as its argument a string that may and
# should include legal Python date format codes.
#
# For example, assuming a file tagged with a date of 1st February 2011, then:
#
# entry_extras_date_format=%Y       results in 2011
# entry_extras_date_format=%d/%m/%y results in 01/02/11
#
# See
# http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior
# for more information.

entry_extras_date_format=%Y

#====================================================================

[index section headers]

# This section allows control of heading entries displayed before
# sections displayed in an index. The sections themselves are
# defined in the advanced sort orders section.

# If you want to display section headers when sections are 
# displayed in an index, set show_section_header to Y:

show_section_header=Y

# If you want to suppress section headers when only a single
# entry is displayed in an index, set show_section_header_on_single
# to N

show_section_header_on_single=N

# If you want to suppress section headers when there are no entries
# found for a section, set show_section_header_when_empty to N

show_section_header_when_empty=N

# If you want to show only one section when the same single entry is
# found for all sections within an index, set
# hide_sections_for_single_entry to Y

# TODO: this key is not supported yet
hide_sections_for_single_entry=Y

# You can specify the characters displayed before and after a section
# header by setting section_header_prefix and/or section_header_suffix

section_header_prefix=------
section_header_suffix=------

#====================================================================

[virtuals]

# Virtual albums are albums that you define yourself in .sp files.
# You can control which indexes virtual albums are displayed in. To do
# so set the following keys to Y or N

display_virtuals_in_album_index=Y
display_virtuals_in_artist_index=Y
display_virtuals_in_contributingartist_index=Y
display_virtuals_in_composer_index=Y

#====================================================================

[works]

# Works are albums that you define yourself in .sp files.
# You can control which indexes works are displayed in. To do so set
# the following keys to Y or N

display_works_in_album_index=Y
display_works_in_artist_index=Y
display_works_in_contributingartist_index=Y
display_works_in_composer_index=Y

#====================================================================

[sort index]

# You can control whether alternate sort orders are enabled in the
# indexes in the controllers
#
# allowable settings are:
#
#    n          - alternate sort orders are not enabled
#
#    simple     - simple alternate sort orders are enabled
#                 (the sort order keys must be specified in the 
#                 simple sort orders section of this ini file)
#
#    advanced   - advanced alternate sort orders are enabled
#                 (the sort order keys must be specified in the 
#                 advanced sort orders section of this ini file)

alternative_index_sorting=simple

#====================================================================

# ==================
# SIMPLE SORT ORDERS
# ==================
#
# Alternate sort order in indexes can be specified for each index. 
# The following names are used to specify the available indices:
#
#   +--ARTISTS
#   |  |
#   |  +--ARTIST_ALBUMS
#   |
#   +--CONTRIBUTINGARTISTS
#   |  |
#   |  +--CONTRIBUTINGARTIST_ALBUMS
#   |
#   +--ALBUMS
#   |
#   +--COMPOSERS
#   |  |
#   |  +--COMPOSER_ALBUMS
#   |
#   +--GENRES
#   |  |
#   |  +--GENRE_ARTISTS
#   |     |
#   |     +--GENRE_ARTIST_ALBUMS
#   |
#   +--TRACKS
#   |
#   +--PLAYLISTS
#
# To create a sort order entry for an index, create a block with
# the name of the index followed by 'sort index'. Then create a key
# of sort_order with a value of the desired sort order. For example:
#
#     [ALBUMS sort index]
#     sort_order=year
#
# will cause your album index entries to be sorted on year rather
# than the default of album name.
#
# The available sort orders for each of the indexes are:
#
#     ARTISTS - artist, artistsort, lastplayed, playcount
#
#         ARTIST_ALBUMS - album, albumsort, year, inserted, created, 
#                         lastmodified, lastplayed, playcount, albumtype
#
#     CONTRIBUTINGARTISTS - artist, artistsort, lastplayed, playcount
#
#         CONTRIBUTINGARTIST_ALBUMS - album, albumsort, year, inserted, 
#                                     created, lastmodified, lastplayed, 
#                                     playcount, albumtype
#
#     ALBUMS - album, albumsort, artist, composer, year, inserted, created, 
#              lastmodified, lastplayed, playcount, albumtype
#
#     COMPOSERS - composer, composersort, lastplayed, playcount
#
#         COMPOSER_ALBUMS - album, albumsort, year, inserted, created, 
#                           lastmodified, lastplayed, playcount, albumtype
#
#     GENRES - genre, lastplayed, playcount
#
#         GENRE_ARTISTS - artist, artistsort, lastplayed, playcount
#
#             GENRE_ARTIST_ALBUMS - album, albumsort, year, inserted, 
#                                   created, lastmodified, lastplayed, 
#                                   playcount, albumtype
#
#     TRACKS - title, titlesort, artist, album, genre, tracknumber, year, 
#              composer, codec, length, size, created, path, filename, 
#              discnumber, bitrate, samplerate, bitspersample, channels, 
#              lastmodified, inserted, lastplayed, playcount
#
#     PLAYLISTS - playlist, plfile, inserted, created, 
#                 lastmodified
#
# Each sort_order entry can be followed by asc or desc to denote
# an ascending (default) or descending sort order. Multiple fields
# can also be specified for a sort order, so that the order will
# be determined by the first field, followed by the second etc.
# If you specify multiple fields, separate them with a comma, for
# example:
#
#     sort_order=playcount,lastplayed
#
#
# DISPLAY NAMES
# =============
# You can also specify fields to prefix and suffix an index entry
# in the display. These fields will be displayed for each entry in
# the index, with the values gathered from the tags for that entry.
# To prefix an index entry use a key of entry_prefix with a value 
# of a tag available for that entry. For example to prefix entries
# in the album index with year, use:
#
#     entry_prefix=year
#
# Similarly to suffix an entry with playcount, use:
#
#     entry_suffix=playcount
#
# Available prefixes and suffixes for each index are:
#
#     ARTISTS - artist, artistsort, lastplayed, playcount
#
#         ARTIST_ALBUMS - album, albumsort, year, inserted, created, 
#                         lastmodified, lastplayed, playcount, albumtype
#
#     CONTRIBUTINGARTISTS - artist, artistsort, lastplayed, playcount
#
#         CONTRIBUTINGARTIST_ALBUMS - album, albumsort, year, inserted, 
#                                     created, lastmodified, lastplayed, 
#                                     playcount, albumtype
#
#     ALBUMS - album, albumsort, artist, composer, year, inserted, created, 
#              lastmodified, lastplayed, playcount, albumtype
#
#     COMPOSERS - composer, composersort, lastplayed, playcount
#
#         COMPOSER_ALBUMS - album, albumsort, year, inserted, created, 
#                           lastmodified, lastplayed, playcount, albumtype
#
#     GENRES - genre, lastplayed, playcount
#
#         GENRE_ARTISTS - artist, artistsort, lastplayed, playcount
#
#             GENRE_ARTIST_ALBUMS - album, albumsort, year, inserted, 
#                                   created, lastmodified, lastplayed, 
#                                   playcount, albumtype
#
#     TRACKS - title, titlesort, artist, album, genre, tracknumber, year, 
#              composer, codec, length, size, created, path, filename, 
#              discnumber, bitrate, samplerate, bitspersample, channels, 
#              lastmodified, inserted, lastplayed, playcount
#
#     PLAYLISTS - playlist, plfile, inserted, created, 
#                 lastmodified
#
#
# PROXY SORT ORDERS
# =================
# You can also specify different sort orders for different proxies.
# To do so use the proxyname key. To make a sort order applicable to
# all proxies use a value of ALL (default). So to make a sort order
# section applicable to all proxies use:
#
#     proxyname=ALL
#
# whilst to make one applicable to just the proxy called 'Recent' use:
#
#     proxyname=Recent
#
#
# CONTROLLER SORT ORDERS
# ======================
# You can also specify different sort orders for different controllers.
# To do so use the controller key. To make a sort order applicable to
# all controllers use a value of ALL (default). So to make a sort order
# section applicable to all controllers use:
#
#     controller=ALL
#
# whilst to make one applicable to just the PC desktop controller use:
#
#     controller=PCDCR
#
# Allowable controller entries are:
#
#     PCDCR
#     CR100
#     CR200
#     ACR
#     iPod touch
#     Sonospy
#
#
# SORT ORDER ACTIVATION
# =====================
# To deactivate a sort order set the active key to something other than
# Y (default), for example:
#
#     active=N
#
#

[ALBUMS sort index]
controller=PCDCR
entry_suffix=artist

[ARTIST_ALBUMS sort index]
controller=PCDCR
sort_order=year
entry_suffix=year

[ARTIST_ALBUMS sort index]
sort_order=created desc
entry_suffix=playcount

[CONTRIBUTINGARTIST_ALBUMS sort index]
sort_order=created desc
entry_suffix=playcount

#====================================================================

# ====================
# ADVANCED SORT ORDERS
# ====================
#
# Multiple sort orders can be specified for an index, resulting in multiple
# sections in that index. For example you could choose to display the entries
# in the ARTIST_ALBUMS index in both album and year orders. To do that you 
# need to create duplicate sort index section blocks for the index you want
# to do it for.
#
# To create sort order section entries for an index, create blocks with
# the name of the index followed by 'sort index section'. Then create keys
# of sort_order with values of the desired sort orders. For example:
#
#     [ALBUMS sort index section]
#     sort_order=album
#
#     [ALBUMS sort index section]
#     sort_order=year
#
# Note that sort index section blocks override any sort index blocks for the
# same index specified elsewhere in this file for simple sorts. So if you
# have:
#
#     [ALBUM sort index]
#     sort_order=album
#
#     [ALBUM sort index section]
#     sort_order=year
#
# then the section block will take precedence and the album index will be
# sorted on year.
#
# Note also that when alternative_index_sorting=advanced is set, simple
# sort ordering is also enabled so simple blocks that are not overriden
# with advanced ones will also be active.
#
# You can control the order of display of sections in an index using the
# section_sequence key. For example to reorder the above example you could
# use:
#
#     [ALBUMS sort index section]
#     sort_order=album
#     section_sequence=2
#
#     [ALBUMS sort index section]
#     sort_order=year
#     section_sequence=1
#
# You can specify different keys for each index section, causing them to be
# displayed differently. For example:
#
#     [ALBUMS sort index section]
#     sort_order=album
#     section_sequence=2
#     entry_suffix=playcount
#
#     [ALBUMS sort index section]
#     sort_order=year
#     section_sequence=1
#     entry_suffix=year
#
# You can filter album types in a section, so that any combination of albums,
# virtuals and works are displayed in a section. To do that use the 
# section_albumtype key ('ALL' is the default). For example:
#
#     [ALBUMS sort index section]
#     sort_order=album
#     section_albumtype=virtual
#
#     [ALBUMS sort index section]
#     sort_order=year
#
# Note that though you specify album, virtual or work as section_albumtype,
# if you want to sort on virtual or work title you specify the sort_order
# as album (as virtuals and works are treated as albums).
#
# You can specify a list of entries in section_albumtype separated with
# commas, for example:
#
#     [ALBUMS sort index section]
#     sort_order=album
#     section_albumtype=virtual,work
#
# When you add sections to indexes, display of headings for those sections is
# controlled by the [section headers] keys:
#
#     [section headers]
#     show_section_header=Y
#     show_section_header_on_single=N
#     show_section_header_when_empty=N
#     hide_sections_for_single_entry=Y
#     section_header_delimiter=------
#
# By default the headings are created by combining 'ordered by' with the
# sort_order for that section. You can change the default heading by using
# the section_name key, for example:
#
#     section_name=Year order
#

[COMPOSER_ALBUMS sort index section]
sort_order=work
section_sequence=1
section_albumtype=work
section_name=Works

[COMPOSER_ALBUMS sort index section]
sort_order=album
section_sequence=2
section_albumtype=album

[ARTIST_ALBUMS sort index section]
controller=PCDCR
sort_order=virtual
entry_suffix=year
section_sequence=1
section_albumtype=virtual
section_name=Virtuals

[ARTIST_ALBUMS sort index section]
controller=PCDCR
sort_order=year
entry_suffix=year
section_sequence=2
section_albumtype=album
section_name=Albums

