[WMP Translators]
# Translations to be applied for UPnP servers specified after the equals in -w command
# line option
#
# WMP is the reference (do not change)
# Supported types are:
#    Through - Sonos WMP searches are passed through unadjusted to the proxied server
#              (will only work with fully WMP compliant servers - these will show up
#              on the Sonos controller anyway so it is only useful for testing)
#    Translate - WMP containers are translated to those specified for the UPnP server
#                (only 3 containers are actually used by Sonos for WMP)
#    Cache - WMP containers are translated, plus UPnP server returns are cached for
#            further WMP searches to translate into UPnP server searches.
#            Second parameter shows whether container is discrete or needs
#            search criteria applying subsequently
#    Browse - Sonos WMP searches are translated into UPnP server browses - NOTE, NOT CURRENTLY SUPPORTED
#
WMP=1
#Twonky=Translate
Twonky=Cache,Not Discrete
Asset=Cache,Discrete
xxxx=Browse
Windows=Through

[WMP Containers]
# WMP container IDs (not all are supported by Sonos)
# Do not change
#
Root=0
Music=1
All Music=4
Genre=5
Artist=6
Album=7
Playlists=F
Folders=14
Contributing Artists=100
Album Artist=107
Composer=108
Rating=101

[Sonos Containers]
# WMP containers that Sonos searches
# Format is containername=container,upnp:class[,operator] (note Sonos does not
# always query a specific container, hence the need for the class)
# Note - operator defaults to = (no need to specify that)
# Note - names must remain the same!
#
Artist=107,object.container.person.musicArtist
Contributing Artists=100,object.container.person.musicArtist
Album=0,object.container.album.musicAlbum
Composer=108,object.container.person.musicArtist
Genre=0,object.container.genre.musicGenre
Tracks=0,object.item.audioItem,derivedfrom
Playlists=0,object.container.playlistContainer

[Asset Containers]
# Containers that Asset uses for WMP container names
# Note that mapping the wrong containers may allow alternate containers to be
# searched, but equally they may not work correctly
# Note - for Asset to work with Sonos like this, Asset needs some removals from
#        its browse tree.
#
#        Browse tree that works:
#           Artist (No track listing)
#               Album (Display all)
#           Contributing Artist (No track listing)
#               Album (Display all)
#           Album (Display all)
#           Composer (No track listing)
#               Album (Display all)
#           Genre (No track listing)
#               Artist (No track listing)
#                   Album (Display all)
#           Title (Display all)
#           Playlist not set (needs registered version)
#
# It is likely that your Asset installation will use some container IDs that
# are different to the ones below (esp Contributing Artists as that is not in
# the standard Asset browse tree and you will have to add it)
#
# It is also likely that you will have to rescan your library in Asset to
# activate the above changes
#
# Note - keys (names) below must remain the same!
#
Artist=au1
Contributing Artists=au15
Album=au2
Composer=au6
Genre=au4
Tracks=au3
Playlists=

[Asset Attribute Mapping]
# This is not needed for Cache type translations
#
#microsoft__colon__artistAlbumArtist=upnp__colon__artist

[Twonky Containers]
# Containers that Twonky supports
#
Artist=1$12
Contributing Artists=1$17,object.container.person.albumArtist
Album=1$14
Composer=1$16,object.container.person.author
Genre=1$13
Tracks=1$268435466
Playlists=1$11

[Twonky Container Mapping]
# Mapping of Twonky containers to WMP containers (where WMP specifies containers)
# Where container is not supported, equate to empty string so controller shows
# no selection available
#
#Album Artist=Artist
107=1$12
#Contributing Artists=Album Artist
100=1$17
#Composer=Composer
108=1$16

[Twonky Attribute Mapping]
# Mapping of Twonky attributes to WMP attributes where WMP attributes are not
# supported by Twonky
#
microsoft__colon__artistAlbumArtist=upnp__colon__artist
object.container.person.musicArtist=object.container.person.author
microsoft__colon__authorComposer=upnp__colon__author
microsoft__colon__artistAlbumArtist=upnp__colon__albumArtist
microsoft__colon__artistPerformer=upnp__colon__albumArtist

#[IP Volume]
#Front Room,Volume Up=IRAnywhere/AV VOL UP.txt
#Front Room,Volume Down=IRAnywhere/AV VOL DOWN.txt
#Front Room,Volume Mute=IRAnywhere/AV MUTE.txt
#Front Room,Volume UnMute=IRAnywhere/AV UNMUTE.txt
#IR_IP=192.168.0.31
#IR_PORT=65432

[INI]
controlpoint_port=50101
proxy_port=50102
wmp_proxy_port=10243
wmp_internal_port=10244
internal_proxy_udn=uuid:5e0fc086-1c37-4648-805c-ec2aba2b0a27

prefer_folderart=N
use_albumartist=Y
show_duplicates=N
album_identification=album
#album_identification=album,artist

show_chunk_header=Y
show_chunk_header_on_single=N
show_chunk_header_when_empty=N
hide_chunks_for_single_entry=Y
chunk_header_delimiter=------

chunk_metadata_delimiter_prefix_start=
chunk_metadata_delimiter_prefix_end=' • '

chunk_metadata_delimiter_suffix_start=' • '
chunk_metadata_delimiter_suffix_end=

chunk_metadata_empty=_
chunk_metadata_date_format=%d/%m/%y

now_playing_artist=last
now_playing_artist_combiner=' / '
mouseover_artist=all
mouseover_artist_combiner=' / '

[virtuals]

# sets which indexes virtuals will be displayed in

display_virtuals_in_album_index=Y
display_virtuals_in_artist_index=Y
display_virtuals_in_contributingartist_index=Y
display_virtuals_in_composer_index=Y

[works]

# sets which indexes works will be displayed in

display_works_in_album_index=Y
display_works_in_artist_index=Y
display_works_in_contributingartist_index=Y
display_works_in_composer_index=Y

[sort index]

# controls whether alternate sort orders are enabled in the
# indexes in the controllers
#
# allowable settings are:
#
#    n          - alternate sort orders are not enabled
#
#    simple     - simple alternate sort orders are enabled
#                 - these are specified in this ini file
#
#    advanced   - advanced alternate sort orders are enabled
#                 - these are specified in the sorts table
#                   in the database

alternative_index_sorting=simple

# ==================
# SIMPLE SORT ORDERS
# ==================
#
# Alternate sort order in indexes can be specified for each index. 
# The following names are used to specify the available indices:
#
#   +--ARTISTS
#   |  |
#   |  +--ARTIST_ALBUMS
#   |
#   +--CONTRIBUTINGARTISTS
#   |  |
#   |  +--CONTRIBUTINGARTIST_ALBUMS
#   |
#   +--ALBUMS
#   |
#   +--COMPOSERS
#   |  |
#   |  +--COMPOSER_ALBUMS
#   |
#   +--GENRES
#   |  |
#   |  +--GENRE_ARTISTS
#   |     |
#   |     +--GENRE_ARTIST_ALBUMS
#   |
#   +--TRACKS
#   |
#   +--PLAYLISTS
#
# To create a sort order entry for an index, create a block with
# the name of the index followed by 'sort index'. Then create a key
# of sort_order with a value of the desired sort order. For example:
#
#     [ALBUM sort index]
#     sort_order=year
#
# will cause your album index entries to be sorted on year rather
# than the default of album name.
#
# The available sort orders for each of the indexes are:
#
#     ARTISTS - artist, artistsort, lastplayed, playcount
#
#         ARTIST_ALBUMS - album, albumsort, year, inserted, created, 
#                         lastmodified, lastplayed, playcount, albumtype
#
#     CONTRIBUTINGARTISTS - artist, artistsort, lastplayed, playcount
#
#         CONTRIBUTINGARTIST_ALBUMS - album, albumsort, year, inserted, 
#                                     created, lastmodified, lastplayed, 
#                                     playcount, albumtype
#
#     ALBUMS - album, albumsort, artist, composer, year, inserted, created, 
#              lastmodified, lastplayed, playcount, albumtype
#
#     COMPOSERS - composer, composersort, lastplayed, playcount
#
#         COMPOSER_ALBUMS - album, albumsort, year, inserted, created, 
#                           lastmodified, lastplayed, playcount, albumtype
#
#     GENRES - genre, genresort, lastplayed, playcount
#
#         GENRE_ARTISTS - artist, artistsort, lastplayed, playcount
#
#             GENRE_ARTIST_ALBUMS - album, albumsort, year, inserted, 
#                                   created, lastmodified, lastplayed, 
#                                   playcount, albumtype
#
#     TRACKS - title, titlesort, artist, album, genre, tracknumber, year, 
#              composer, codec, length, size, created, path, filename, 
#              discnumber, bitrate, samplerate, bitspersample, channels, 
#              lastmodified, inserted, lastplayed, playcount
#
#     PLAYLISTS - playlist, playlistsort, plfile, inserted, created, 
#                 lastmodified
#
# Each sort_order entry can be followed by asc or desc to denote
# an ascending (default) or descending sort order. Multiple fields
# can also be specified for a sort order, so that the order will
# be determined by the first field, followed by the second etc.
# If you specify multiple fields, separate them with a comma, for
# example:
#
#     sort_order=playcount,lastplayed
#
#
# DISPLAY NAMES
# =============
# You can also specify fields to prefix and suffix an index entry
# in the display. These fields will be displayed for each entry in
# the index, with the values gathered from the tags for that entry.
# To prefix an index entry use a key of entry_prefix with a value 
# of a tag available for that entry. For example to prefix entries
# in the album index with year, use:
#
#     entry_prefix=year
#
# Similarly to suffix an entry with playcount, use:
#
#     entry_suffix=playcount
#
# Available prefixes and suffixes for each index are:
#
#     ARTISTS - artist, artistsort, lastplayed, playcount
#
#         ARTIST_ALBUMS - album, albumsort, year, inserted, created, 
#                         lastmodified, lastplayed, playcount, albumtype
#
#     CONTRIBUTINGARTISTS - artist, artistsort, lastplayed, playcount
#
#         CONTRIBUTINGARTIST_ALBUMS - album, albumsort, year, inserted, 
#                                     created, lastmodified, lastplayed, 
#                                     playcount, albumtype
#
#     ALBUMS - album, albumsort, artist, composer, year, inserted, created, 
#              lastmodified, lastplayed, playcount, albumtype
#
#     COMPOSERS - composer, composersort, lastplayed, playcount
#
#         COMPOSER_ALBUMS - album, albumsort, year, inserted, created, 
#                           lastmodified, lastplayed, playcount, albumtype
#
#     GENRES - genre, genresort, lastplayed, playcount
#
#         GENRE_ARTISTS - artist, artistsort, lastplayed, playcount
#
#             GENRE_ARTIST_ALBUMS - album, albumsort, year, inserted, 
#                                   created, lastmodified, lastplayed, 
#                                   playcount, albumtype
#
#     TRACKS - title, titlesort, artist, album, genre, tracknumber, year, 
#              composer, codec, length, size, created, path, filename, 
#              discnumber, bitrate, samplerate, bitspersample, channels, 
#              lastmodified, inserted, lastplayed, playcount
#
#     PLAYLISTS - playlist, playlistsort, plfile, inserted, created, 
#                 lastmodified
#
#
# PROXY SORT ORDERS
# =================
# You can also specify different sort orders for different proxies.
# To do so use the proxyname key. To make a sort order applicable to
# all proxies use a value of ALL (default). So to make a sort order
# section applicable to all proxies use:
#
#     proxyname=ALL
#
# whilst to make one applicable to just the proxy called 'Recent' use:
#
#     proxyname=Recent
#
#
# CONTROLLER SORT ORDERS
# ======================
# You can also specify different sort orders for different controllers.
# To do so use the controller key. To make a sort order applicable to
# all controllers use a value of ALL (default). So to make a sort order
# section applicable to all controllers use:
#
#     controller=ALL
#
# whilst to make one applicable to just the PC desktop controller use:
#
#     controller=PCDCR
#
# Allowable controller entries are:
#
#     PCDCR
#     CR100
#     CR200
#     ACR
#     iPod touch
#     Sonospy
#
#
# SORT ORDER ACTIVATION
# =====================
# To deactivate a sort order set the active key to something other than
# Y (default), for example:
#
#     active=N
#
#

[ALBUMS sort index]
controller=PCDCR
entry_suffix=artist

[ARTIST_ALBUMS sort index]
controller=PCDCR
sort_order=year
entry_suffix=year

[ARTIST_ALBUMS sort index]
sort_order=created desc
entry_suffix=playcount

[CONTRIBUTINGARTIST_ALBUMS sort index]
sort_order=created desc
entry_suffix=playcount

# ====================
# ADVANCED SORT ORDERS
# ====================
#
# Multiple sort orders can be specified for an index, resulting in multiple
# sections in that index. For example you could choose to display the entries
# in the ARTIST_ALBUMS index in both album and year orders. To do that you 
# need to create duplicate sort index section blocks for the index you want
# you want to do it for.
#
# To create sort order section entries for an index, create blocks with
# the name of the index followed by 'sort index section'. Then create keys
# of sort_order with values of the desired sort orders. For example:
#
#     [ALBUM sort index section]
#     sort_order=album
#
#     [ALBUM sort index section]
#     sort_order=year
#
# You can control the order of display of sections in an index using the
# section_sequence key. For example to reorder the above example you could
# use:
#
#     [ALBUM sort index section]
#     sort_order=album
#     section_sequence=2
#
#     [ALBUM sort index section]
#     sort_order=year
#     section_sequence=1
#
# You can specify different keys for each index section, causing them to be
# displayed differently. For example:
#
#     [ALBUM sort index section]
#     sort_order=album
#     section_sequence=2
#     entry_suffix=playcount
#
#     [ALBUM sort index section]
#     sort_order=year
#     section_sequence=1
#     entry_suffix=year
#
# You can filter album types in a section, so that any combination of albums,
# virtuals and works are displayed in a section. To do that use the 
# section_albumtype key ('ALL' is the default). For example:
#
#     [ALBUM sort index section]
#     sort_order=album
#     section_albumtype=virtual
#
#     [ALBUM sort index section]
#     sort_order=year
#
# You can specify a list of entries in section_albumtype separated with commas.
#
# When you add sections to indexes, display of headings for those sections is
# controlled by the [section headers] keys:
#
#     [section headers]
#     show_section_header=Y
#     show_section_header_on_single=N
#     show_section_header_when_empty=N
#     hide_sections_for_single_entry=Y
#     section_header_delimiter=------
#
# By default the headings are created by combining 'ordered by' with the
# sort_order for that section. You can change the default heading by using
# the section_name key, for example:
#
#     section_name=Year order
#

[COMPOSER_ALBUMS sort index section]
sort_order=work
section_sequence=1
section_albumtype=work
section_name=Works

[COMPOSER_ALBUMS sort index section]
sort_order=album
section_sequence=2
section_albumtype=album

