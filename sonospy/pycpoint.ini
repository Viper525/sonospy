#====================================================================

#[IP Volume]
#
# You can control volume on external kit is using the IR interface
#
#Front Room,Volume Up=IRAnywhere/AV VOL UP.txt
#Front Room,Volume Down=IRAnywhere/AV VOL DOWN.txt
#Front Room,Volume Mute=IRAnywhere/AV MUTE.txt
#Front Room,Volume UnMute=IRAnywhere/AV UNMUTE.txt
#IR_IP=192.168.0.31
#IR_PORT=65432

#====================================================================

[INI]
controlpoint_port=50101
proxy_port=50102
comms_port=50103
wmp_proxy_port=10243
wmp_internal_port=10244
internal_proxy_udn=uuid:5e0fc086-1c37-4648-805c-ec2aba2b0a27

[database]
#db_cache_size=2000
#db_persist_connection=N

#====================================================================

[display preferences]

# If you have both art embedded in music files and art in folders, you
# can choose which one takes precedence with prefer_folderart

prefer_folderart=Y

# You can choose whether the artist index contains entries from the
# artist or albumartist tags in your data (note that the contributing
# artist index will contain entries from your artist tags). If you want
# to show albumartist tags, set use_albumartist to Y

use_albumartist=Y

# You can choose how to group tracks into albums. If you want all 
# tracks from an album to be together regardless of albumartist, set
# album_identification to album. If you want separate albums for 
# separate artists, set it to album,albumartist.

album_identification=album
#album_identification=album,albumartist

# If you have set album_identification to group albums with the same
# name, you will get tracks from multiple same-named albums together
# when selecting them from the artists index. You can choose for those
# to have separate index entries by setting the following key to Y
# (note that you will also have to enable them in scan):

show_separate_albums=N

# If you have multiple tag entries per track, you can use the following
# keys to set which of those entries are displayed in the now playing
# screen. Those same tags will be the ones scrobbled if scrobbling is 
# enabled.
#
# Allowable values are:
#
#     first    - the first tag entry is displayed
#     last     - the last entry is displayed
#     all      - all tag entries are displayed, separated by the 
#                combiner characters
#     selected - the selected (in the index) entry is displayed
#                (default)
#
# Fields where multiple tags can cause alternate display values are:
#
#     album / artist

now_playing_album=first
now_playing_album_combiner=' / '

now_playing_artist=last
now_playing_artist_combiner=' / '

# If playing a track from a virtual album or work, you can set whether
# to display the virtual/work name and/or artist name instead of the
# track album/artist names (note whatever is displayed is scrobbled).
# To do so set one or more of the following keys to Y:

virtual_now_playing_album = N
virtual_now_playing_artist = N

work_now_playing_album = N
work_now_playing_artist = N

#====================================================================

[index entry extras]

# This section allows setting of characters to be displayed around
# extra fields added to index entries. The extra fields themselves
# are defined in the simple sort orders section. You can add extra
# fields before (prefix) and/or after (suffix) an entry. Extra fields
# are displayed as:
#
#     PREFIX entry SUFFIX
#
# You can specify a prefix before an index entry, for example 
# playcount. You can specify the characters that you want to display
# around the prefix. If you want to include spaces in the characters,
# enclose the characters in single quotes. The 
# entry_prefix_start_separator characters will be displayed before 
# the prefix, and the entry_prefix_end_separator will be displayed
# after the prefix (and so between the prefix and the entry). If
# you do not want a separator, leave it empty. The prefix will be
# displayed as:
#
#     START_SEPARATOR prefix END_SEPARATOR

entry_prefix_start_separator=
entry_prefix_end_separator=' • '

# You can specify a suffix after an entry. The same rules apply as
# for a prefix, but note that in this case the start character will
# be between the suffix and the entry and the end character will be
# at the end of the line.

entry_suffix_start_separator=' • '
entry_suffix_end_separator=

# When a prefix or a suffix is displayed with an entry, it is 
# possible that the prefix/suffix will be blank due to empty tag
# data. If you want a specific character or characters to be
# displayed instead of nothing, specify them in the entry_extras_empty
# key (note that removing the key will result in _ being displayed,
# whereas setting in to nothing will result in nothing being displayed). 
# If you do not want the prefix/suffix separator displayed if the
# prefix/suffix is empty, set the dont_display_separator_for_empty_prefix
# and/or dont_display_separator_for_empty_suffix flags to Y.

entry_extras_empty=?
dont_display_separator_for_empty_prefix=N
dont_display_separator_for_empty_suffix=N

# When you specify a date to be displayed as a prefix or a suffix,
# you may want to control the format used to display the date. Do that with
# the entry_extras_date_format key.
# 
# entry_extras_date_format accepts as its argument a string that may and
# should include legal Python date format codes.
#
# For example, assuming a file tagged with a date of 1st February 2011, then:
#
# entry_extras_date_format=%Y       results in 2011
# entry_extras_date_format=%d/%m/%y results in 01/02/11
#
# See
# http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior
# for more information.

entry_extras_date_format=%Y

#====================================================================

[virtuals]

# Virtual albums are albums that you define yourself in .sp files.
# You can control which indexes virtual albums are displayed in. To do
# so set the following keys to Y or N

display_virtuals_in_album_index=Y
display_virtuals_in_albumartist_index=Y
display_virtuals_in_artist_index=Y
display_virtuals_in_composer_index=Y

#====================================================================

[works]

# Works are albums that you define yourself in .sp files.
# You can control which indexes works are displayed in. To do so set
# the following keys to Y or N

display_works_in_album_index=Y
display_works_in_albumartist_index=Y
display_works_in_artist_index=Y
display_works_in_composer_index=Y

#====================================================================

[indexing]

# When using Sonospy to serve your database to Sonos controllers,
# you can choose to do it two ways:
#
#    1) As a Windows Media Player clone (via the Proxy)
#
#       This serves files directly without transcoding, but
#       does not offer search capabilities
#
#    2) As a local music service (via the Service)
#
#       This has to transcode files, but does offer search
#       capabilities
#
# You can choose to offer both methods at the same time, as well
# as running multiple versions of the WMP clone against different
# databases.
#
# Turning on these capabilities is controlled from the command 
# line (see README). Once turned on you have the option to utilise
# the default indexes provided by those services, or create your 
# own to suit your own personal needs. For either option, you can
# also control other aspects of those indexes, namely:
#
#    1) The sort order of entries in an index
#    2) Data to be displayed before an entry
#    3) Data to be displayed after an entry
#
# If you choose to define your own indexes, then you can also
# control the range of data in an index.
#
# You can also choose to treat the same index differently across
# different Proxies and/or the Service, as well as on different
# controllers.
# 
# To turn on alternate indexing you set the alternative_indexing
# flag (note that this turns it on for both the Proxy and the
# Service).
#
# Allowable settings are:
#
#    N     - alternative indexing is not enabled
#
#    Y     - alternative indexing is enabled
#

alternative_indexing=N

# If alternate_indexing is set to Y, you should then provide 
# details below of how you want those indexes to operate.
# If you just want to utilise the default indexes and perhaps
# change their ordering and add additional data, then you set
# values for the [XXXX default index] sections as shown below.
#
# If you want to display your own indexes and change their
# hierarchies, then you need to turn on user indexes (using 
# the user_indexes key) and then set values for the 
# [XXXX user index] sections further down the ini.
#
#
# ======================
# DEFAULT INDEX SETTINGS
# ======================
#
#
# SORT ORDER
# ==========
#
# Alternate sort order in indexes can be specified for each default index. 
# The following names are used to specify the available default indices:
#
#   +--ALBUMARTIST
#   |  |
#   |  +--ALBUMARTIST_ALBUM
#   |
#   +--ARTIST
#   |  |
#   |  +--ARTIST_ALBUM
#   |
#   +--ALBUM
#   |
#   +--COMPOSER
#   |  |
#   |  +--COMPOSER_ALBUM
#   |
#   +--GENRE
#   |  |
#   |  +--GENRE_ALBUMARTIST
#   |     |
#   |     +--GENRE_ALBUMARTIST_ALBUM
#   |
#   +--PLAYLIST
#   |
#   +--TRACK
#
# To create a sort order entry for an index, create a section with
# the name of the index followed by 'default index'. Then create a key
# of sort_order with a value of the desired sort order. For example:
#
#     [ALBUM default index]
#     sort_order=year
#
# will cause your album index entries to be sorted on year rather
# than the default of album name.
#
# The available sort orders for each of the default indexes are:
#
#     ALBUMARTIST - albumartist, albumartistsort, lastplayed, playcount
#
#         ALBUMARTIST_ALBUM - album, albumsort, year, inserted, created, 
#                             lastmodified, lastplayed, playcount, albumtype
#
#     ARTIST - artist, artistsort, lastplayed, playcount
#
#         ARTIST_ALBUM - album, albumsort, year, inserted, 
#                        created, lastmodified, lastplayed, 
#                        playcount, albumtype
#
#     ALBUM - album, albumsort, artist, composer, year, inserted, created, 
#             lastmodified, lastplayed, playcount, albumtype
#
#     COMPOSER - composer, composersort, lastplayed, playcount
#
#         COMPOSER_ALBUM - album, albumsort, year, inserted, created, 
#                          lastmodified, lastplayed, playcount, albumtype
#
#     GENRE - genre, lastplayed, playcount
#
#         GENRE_ALBUMARTIST - artist, artistsort, lastplayed, playcount
#
#             GENRE_ALBUMARTIST_ALBUM - album, albumsort, year, inserted, 
#                                       created, lastmodified, lastplayed, 
#                                       playcount, albumtype
#
#     PLAYLIST - playlist, plfile, inserted, created, 
#                lastmodified
#
#     TRACK - title, titlesort, artist, album, genre, tracknumber, year, 
#             composer, codec, length, size, created, path, filename, 
#             discnumber, bitrate, samplerate, bitspersample, channels, 
#             lastmodified, inserted, lastplayed, playcount
#
#
# Each sort_order entry can be followed by asc or desc to denote
# an ascending (default) or descending sort order. Multiple fields
# can also be specified for a sort order, so that the order will
# be determined by the first field, followed by the second etc.
# If you specify multiple fields, separate them with a comma, for
# example:
#
#     sort_order=playcount,lastplayed
#
#
# DISPLAY NAME
# ============
# You can also specify fields to prefix and suffix an index entry
# in the display. These fields will be displayed for each entry in
# the index, with the values gathered from the tags for that entry.
# To prefix an index entry use a key of entry_prefix with a value 
# of a tag available for that entry. For example to prefix entries
# in the album index with year, use:
#
#     entry_prefix=year
#
# Similarly to suffix an entry with playcount, use:
#
#     entry_suffix=playcount
#
# Available prefixes and suffixes for each index are:
#
#     ALBUMARTIST - albumartist, albumartistsort, lastplayed, playcount
#
#         ALBUMARTIST_ALBUM - album, albumsort, year, inserted, created, 
#                             lastmodified, lastplayed, playcount, albumtype
#
#     ARTIST - artist, artistsort, lastplayed, playcount
#
#         ARTIST_ALBUM - album, albumsort, year, inserted, 
#                        created, lastmodified, lastplayed, 
#                        playcount, albumtype
#
#     ALBUM - album, albumsort, artist, composer, year, inserted, created, 
#             lastmodified, lastplayed, playcount, albumtype
#
#     COMPOSER - composer, composersort, lastplayed, playcount
#
#         COMPOSER_ALBUM - album, albumsort, year, inserted, created, 
#                          lastmodified, lastplayed, playcount, albumtype
#
#     GENRE - genre, lastplayed, playcount
#
#         GENRE_ALBUMARTIST - artist, artistsort, lastplayed, playcount
#
#             GENRE_ALBUMARTIST_ALBUM - album, albumsort, year, inserted, 
#                                       created, lastmodified, lastplayed, 
#                                       playcount, albumtype
#
#     PLAYLIST - playlist, plfile, inserted, created, 
#                lastmodified
#
#     TRACK - title, titlesort, artist, album, genre, tracknumber, year, 
#             composer, codec, length, size, created, path, filename, 
#             discnumber, bitrate, samplerate, bitspersample, channels, 
#             lastmodified, inserted, lastplayed, playcount
#
#
# PROXY SETTING
# =============
# You can also specify different index settings for different proxies.
# To do so use the proxyname key. To make index settings applicable to
# all proxies use a value of ALL (default). So to make an index settings
# section applicable to all proxies use:
#
#     proxyname=ALL
#
# whilst to make one applicable to just the proxy called 'Recent' use:
#
#     proxyname=Recent
#
#
# SERVICE SETTING
# ===============
# You can also specify different index settings for the local music service.
# To do so use the servicename key. So to make an index settings section
# applicable to the local music service called 'Local' use:
#
#     servicename=Local
#
#
# CONTROLLER SETTING
# ==================
# You can also specify different index settings for different controllers.
# To do so use the controller key. To make index settings applicable to
# all controllers use a value of ALL (default). So to make an index settings
# section applicable to all controllers use:
#
#     controller=ALL
#
# whilst to make one applicable to just the Windows desktop controller use:
#
#     controller=WDCR
#
# Allowable controller entries are:
#
#     WDCR
#     MDCR
#     CR100
#     CR200
#     ACR
#     iPhone
#     iPod touch
#     Sonospy
#
#
# INDEX SETTING DEACTIVATION
# ==========================
# To deactivate index settings set the active key to something other than
# Y (default), for example:
#
#     active=N
#
#
# ALL DEFAULT INDEX SETTING OPTIONS
# =================================
#
# The full list of options for default indexes is:
#
#     proxyname     - to set which proxy the entries relate to
#     servicename   - to set which service the entries relate to
#     controller    - to set which controllers the entries relate to
#     sort_order    - to set which fields are used in the order by clause
#     entry_prefix  - to set which tags to display before the title
#     entry_suffix  - to set which tags to display after the title
#     active        - to set whether a section is active or not

# TODO: put back in example settings with explanations

[ALBUM default index]
controller=WDCR
entry_suffix=artist

[ALBUMARTIST_ALBUM default index]
controller=WDCR
sort_order=year
entry_suffix=year

[ALBUMARTIST_ALBUM default index]
controller=ACR
sort_order=year
entry_suffix=year

[ALBUMARTIST_ALBUM default index]
sort_order=created desc
entry_suffix=playcount

[ARTIST_ALBUM default index]
sort_order=created desc
entry_suffix=playcount


# ============
# USER INDEXES
# ============
#

[user indexes]

# If you want to define which indexes are to be displayed in the
# Sonos controllers, you need to set the user_indexes flag to Y:

user_indexes=N

# Note that if user indexes are enabled, no default indexes will be
# displayed (so you have to define equivalents of any default indexes
# you would like to retain).
#
# There are two types of user defined indexes:
#
#    1) Indexes that get their data from the tracks database
#       (user indexes)
#    2) Indexes that are used to allow alternate paths down 
#       user indexes (path indexes)
#
# If you want to use alternate paths down indexes, for instance
# to offer different ordering or different subsets of data, then
# you define those first so that you can refer to them when 
# defining the index hierarchies that you want to display.

[path indexes]

# Path indexes allow you to have multiple paths down any hierarchy.
# Once you create a path index here, you can refer to it in the
# hierarchies that you define in [user index root]. If you create
# a path index, you are able to refer to each path (by position
# in the list) when setting values for that index, so that you can
# set different values for each path.
#
# The format to define a path index is:
#
#     index-name=index-entry1,index-entry2,...
#

albumname-albumyear=Albums by Name,Albums by Year
decade-entries=10's,00's,90's,80's,70's,60's,50's,40's
recent-entries=Last month,1-2 months,2-3 months
recent-year-entries=2013,2012
albumartist-alpha=A-M,N-Z

[user index root]

# Here you define the indexes that appear under the root of the
# Proxy/Service entry. You must also define the indexes in the rest of the
# hierarchies down to leaf level. The key will be used as the entry in
# the root of the service. The values are the indexes in the hierarchy -
# these must be valid fields from track tags separated by forward slashes,
# or user defined indexes.
#
# The final entry in each hierarchy must be the track entry.
#
# All root entries except for user defined indexes will also result in a
# search entry of the same name in the Service interface.
#
# The format of a root hierarchy is:
#
#     root index name=hierarchy-index1/hierarchy-index2/..../track
#
Albums=album/track
Artists=albumartist/album/track
#Artists=albumartist/albumname-albumyear/album/track
Artists (alpha)=albumartist-alpha/artist/album/track
Composers=composer/album/track
#Composers (Artist)=composer/albumartist/album/track
Contributing Artists=artist/album/track
#Decades=decade-entries/albumartist/album/track
Genres=genre/albumartist/album/track
#Genres (Composer)=genre/composer/albumartist/album/track
Playlists=playlist/track
Tracks=track
Last Year=recent-year-entries/artist/album/track
#Ripped=artist/album/track
Playlists=playlist/track
Recent=recent-entries/artist/album/track
Years=year/albumartist/album/track

[user search]

# You can specify search entries that search across multiple indexes
# at the same time. The key is the text that you want displayed in the
# search entries list, the value is a comma separated list of root level
# index names. Note that you cannot specify user defined indexes in the
# index list, and that it is not really sensible to combine textual and
# date formats in the same search.

Album/Albumartist/Track=Albums,Artists,Tracks

# You can also specify search entries that search across non root indexes.
# The key is the text that you want displayed in the search entries list,
# the value is the root index name followed by the sub-index of that root
# entry that you want to search (separated by a forward slash).

Playlist Tracks=Playlists/track

# ===================
# USER INDEX SETTINGS
# ===================
#
#
# If you just want your user defined indexes to be displayed with
# default data from the database and default ordering, you do not
# need to set any other entries for those indexes. Note however
# that if you have created path indexes, they will all contain the
# same data unless you define other settings for them.
#
# If you want to alter what data is displayed in a user defined or
# path index, you need to create a section for that index. Sections
# are named thus:
#
#    [root index name/index-field user index]
#
# where 'root index name' is the name of a [user index root] key,
# and index-field is the name of an index from the corresponding values
# for that key.
#
# Note - if an index-field has a user defined index above it, you
# can refer to individual entries in the user defined index by placing
# the number of the entry after the index-field (separated by a space):
#
#    [root index name/index-field 1 user index]
#
# Note - to refer to the field immediately above a user defined field
# in the hierarchy use the special character @.
#
# For user defined indexes based on track tags, the following keys can be set:
#
#     proxyname     - to set which proxy the entries relate to
#     servicename   - to set which service the entries relate to
#     controller    - to set which controllers the entries relate to
#     sort_order    - to set which fields are used in the order by clause
#     entry_prefix  - to set which tags to display before the title
#     entry_suffix  - to set which tags to display after the title
#     index_range   - to set the range of titles to display
#     range_field   - to set the field that an index range applies to (if
#                     you do not set the range field it defaults to the
#                     index field)
#
# For path indexes, only the following keys are applicable:
#
#     proxyname
#     smapiname
#     controller
#     entry_prefix  - this can only be empty or @
#     entry_suffix  - this can only be empty or @
#
# If you specify an index_range, you must use the following syntax:
#
#     start to end              start match to end match in tag data type
#
#     first n records           number of records in sort order from beginning
#     last n records            number of records in sort order from end
#
#     last n days               number of days before today
#     last n weeks              number of weeks before today
#     last n months             number of months before today
#     last n years              number of years before today
#
#     n days to m days        number of days, from n days to m days
#     n weeks to m weeks      number of weeks, from n weeks to m weeks
#     n months to m months    number of months, from n months to m months
#     n years to m years      number of years, from n years to m years
#
# examples:
#
#     artist        a to czzzzzzz
#     leastplayed   first 100 records
#     inserted      last 30 days
#     inserted      31 days to 90 days

# TODO: tidy up examples and explain them

[Albums/track user index]
entry_prefix=tracknumber

[Tracks/track user index]
entry_suffix=artist

[Playlists/track user index]
entry_suffix=artist

[Playlist Tracks/track user index]
sort_order=title,playlist
entry_suffix=playlist

[Last Year/artist 1 user index]
sort_order=year,artist
range_field=year
index_range=2013 to 2013

[Last Year/artist 2 user index]
sort_order=year,artist
range_field=year
index_range=2012 to 2012

[Ripped/inserted user index]
# order the 'Ripped' index by descending date of insertion into the database,
# displaying the playcount before it and the date of last play after it
smapiname=ALL
controller=ALL
sort_order=inserted desc
entry_prefix=playcount
entry_suffix=lastplayed

[Ripped/artist user index]
smapiname=ALL
controller=ALL
sort_order=inserted desc
entry_prefix=playcount
entry_suffix=lastplayed

[Artists/albumname-albumyear user index]
# on the WDCR, do not add anything to the entries of the user defined index
# 'albumname-albumyear'
controller=WDCR
entry_prefix=

[Artists/albumname-albumyear user index]
# on all but the WDCR, add the artist name (as that is the index above it) 
# as a prefix to the entries of the user defined index 'albumname-albumyear'
controller=ALL
entry_prefix=@

[Artists/album 1 user index]
# order the albums under the user defined index 'albumname-albumyear' first 
# entry 'Albums by Name' by album title, and suffix the title with year
smapiname=ALL
controller=ALL
sort_order=album
entry_suffix=year

[Artists/album 2 user index]
# order the albums under the user defined index 'albumname-albumyear' second 
# entry 'Albums by Year' by album year, and prefix the title with year
smapiname=ALL
controller=ALL
sort_order=year
entry_prefix=year

[Recent/inserted 1 user index]
# order the inserted dates under the user defined index 'recent-entries'
# first entry 'Last 7 days' by descending inserted date, displaying only
# entries inserted in the last 7 days
sort_order=inserted desc
index_range=last 7 days

[Recent/inserted 2 user index]
# order the inserted dates under the user defined index 'recent-entries'
# second entry 'Last 30 days' by descending inserted date, displaying only
# entries inserted in the last 30 days
sort_order=inserted desc
index_range=last 30 days

[Recent/inserted 3 user index]
# order the inserted dates under the user defined index 'recent-entries'
# third entry '31 to 90 days' by descending inserted date, displaying only
# entries inserted between 31 and 90 days ago (inclusive)
sort_order=inserted desc
index_range=31 days to 90 days

[Decades/artist 1 user index]
sort_order=year,artist
entry_prefix=year
range_field=year
index_range=2010 to 2020

[Decades/artist 2 user index]
sort_order=year,artist
entry_prefix=year
range_field=year
index_range=2000 to 2009

[Decades/artist 3 user index]
sort_order=year,artist
entry_prefix=year
range_field=year
index_range=1990 to 1999

[Decades/artist 4 user index]
sort_order=year,artist
entry_prefix=year
range_field=year
index_range=1980 to 1989

[Decades/artist 5 user index]
sort_order=year,artist
entry_prefix=year
range_field=year
index_range=1970 to 1979

[Decades/artist 6 user index]
sort_order=year,artist
entry_prefix=year
range_field=year
index_range=1960 to 1969

[Decades/artist 7 user index]
sort_order=year,artist
entry_prefix=year
range_field=year
index_range=1950 to 1959

[Decades/artist 8 user index]
sort_order=year,artist
entry_prefix=year
range_field=year
index_range=1940 to 1949

[Artists (alpha)/artist 1 user index]
index_range=! to mzzzzzz

[Artists (alpha)/artist 2 user index]
index_range=n to zzzzzzz

