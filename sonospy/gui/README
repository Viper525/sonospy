----------------------------------------------------------------------------
SONOSPY GUI READ ME
----------------------------------------------------------------------------

----------------------------------------------------------------------------
INSTALLATION
----------------------------------------------------------------------------
You will need to get wxPython 2.8 in order to run the GUI (http://www.wxpython.org/download.php)

----------------------------------------------------------------------------
USAGE
----------------------------------------------------------------------------
In general, everything has a tool tip associated with it for some attempts at clarity.

Preferences are stored in gui/GUIpref.ini and can be manually edited or can be saved within
the app on each specific tab using the SAVE DEFAULTS button.

Database extensions are assuming (by default, see below to change) .sdb and .sqlite -- I was originally using .db but I was a bit worried that this would clash with Windows software already associating .db files with some other application.

You can run this by ./sonsopyGUI.py (linux) or python sonospyGUI.py (linux/windows).  You will need to be in the gui/ folder to do that though.  Databases created here are still stored where scan, etc. uses them.

[LAUNCH TAB]
 - Will launch and stop Sonospy.
 - AUTO POPULATE will search for databases (extensions can be set in GUIpref.ini) and will autopopulate the databases and proxy names for you.
 - I have NOT tested this with sonospy_web as I could never get it to work. :P
 - Unless Mark has fixed it already, you cannot have a space in the Display Name fields.
 - I added a scratchpad, like Blue's launcher, per Barry's request.

[SCAN TAB]
 - I've tested FOLDERS TO SCAN with spaces, etc.  Works under linux, but I am sure it is not bug-free. :)
 - SCAN and REPAIR both log to the log window, but it comes through chunk at a time.  Not quite in realtime, but close enough.
 - Add dialog for .ini to override scan.ini per Barry's latest round of changes.

[EXTRACT TAB]
 - Last <X> Albums is experimental, it gets the job done, but it's not perfect.

[VIRTUALS]
 - You can only create virtuals here, I am not, yet, loading them in.

----------------------------------------------------------------------------
KNOWN ISSUES
----------------------------------------------------------------------------
 - I don't think launch is working under Windows for some reason.  But in order to test it properly, I have to: a) install python b) install wxPython c) configure my windows firewall d) probably reboot... I never thought I'd be that elitist linux user, but man, I just got a cold bucket of water as to why I don't like Windows. :P

 - No functionality for loading virtuals yet.  Not sure how I am going to be able to handle multiple virtual definitions within a single .SP file.

 - Sometimes it will report a bash error on a scan/extract to not finding scan.py -- it seems to resolve itself if you don't spam buttons super quick.  I am manually os.chdir(os.pardir) to get out of the gui folder down to where Mark's modules are.  Not sure how else to do it, but I'm still way too green to have even written this GUI, so I am sure there is a better way.

----------------------------------------------------------------------------
TO DO
----------------------------------------------------------------------------
[GENERAL]
 - Kill sonsopy process on window close.
 - Look at installers for entire sonospy project (not just GUI)
 - Minimize to tray?
 - Dynamically scale the frame to fit the visible tab.
 - Move sonospyGUI.py to the root of the Sonospy app (i.e. where sonospy_proxy lives)

[LAUNCH]
 - Hook up Show Duplicates per Blue?

[SCAN]
 - Hook up default_music_path to ease user interface issues on adding new folders, music, etc.
 - Disable notebook tabs during scan
 - Add scratchpad?

[EXTRACT]
 - Hook up default_music_path to ease user interface issues on adding new folders, music, etc.
 - Disable notebook tabs during scan
 - Add scratchpad?
 - Scrub SQL database for valid entries to limit user error.  Blue did this, but I am of split mind on whether or not we want to limit the user this way.  In thoery, we could do "contains" on Genre to get a extract with ROCK, CLASSIC ROCK, etc. if "ROCK" is provided.
 - Lots of error checking, I am sure, to make sure people don't enter a string when the query will expect an int.

[VIRTUALS]
 - Load existing Virtual
 - Hook up default_music_path to ease user interface issues on adding new folders, music, etc.

[GUIFUNCTIONS]
 - Would love to globalize the file dialog mess in this code I wrote... I've got it working right now, just want more elegance.
